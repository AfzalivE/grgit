plugins {
  id 'org.ajoberstar.defaults' version '0.8.1'
  id 'org.jbake.site' version '1.0.0'
  id 'java-gradle-plugin'
  id 'groovy'
}

group = 'org.ajoberstar'
description = 'The Groovy way to use Git.'

sourceCompatibility = '1.8'



sourceSets {
  compatTest {
    compileClasspath += main.output
    runtimeClasspath += main.output
  }
}

configurations.compatTestCompile.extendsFrom configurations.compile

jbake {
  srcDirName = 'docs'
}

gitPublish {
  contents {
    from "${buildDir}/${jbake.destDirName}"
  }
}

gitPublishCopy.dependsOn bake

repositories {
  mavenCentral()
}

dependencies {
  // groovy
  compileOnly 'org.codehaus.groovy:groovy-all:[2.4.0, 3.0.0)'

  // gradle
  compileOnly gradleApi()

  // jgit
  def jgitVersion = '[4.8.0.201706111038-r,)'
  compile "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
  compile "org.eclipse.jgit:org.eclipse.jgit.ui:$jgitVersion"

  // agentproxy
  def agentProxyVersion = '[0.0.9,)'
  compile "com.jcraft:jsch.agentproxy.core:$agentProxyVersion"
  compile "com.jcraft:jsch.agentproxy.jsch:$agentProxyVersion"
  compile "com.jcraft:jsch.agentproxy.pageant:$agentProxyVersion"
  compile "com.jcraft:jsch.agentproxy.sshagent:$agentProxyVersion"
  compile "com.jcraft:jsch.agentproxy.usocket-jna:$agentProxyVersion"
  compile "com.jcraft:jsch.agentproxy.usocket-nc:$agentProxyVersion"
  // agentproxy pulls this in, but we need to force a newer version
  compile 'com.jcraft:jsch:[0.1.54,)'

  // logging
  def slf4jVersion = '[1.7.25,1.8.0-alpha)' // wait for final 1.8.0 to come out before letting it in
  gradleLint.ignore('duplicate-dependency-class') {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    testRuntime "org.slf4j:slf4j-simple:$slf4jVersion"
  }


  // testing
  def junitVersion = '4.12'
  testCompile "junit:junit:$junitVersion"
  compatTestCompile "junit:junit:$junitVersion"
  def spockVersion = '1.1-groovy-2.4'
  testCompile "org.spockframework:spock-core:$spockVersion"
  compatTestCompile "org.spockframework:spock-core:$spockVersion"
}

test {
  useJUnit {
    excludeCategories 'org.ajoberstar.grgit.fixtures.PlatformSpecific'
  }
}

['Windows', 'Linux', 'Mac'].each { platform ->
  tasks.create("test${platform}", Test) {
    useJUnit {
      includeCategories "org.ajoberstar.grgit.fixtures.${platform}Specific"
    }
    System.properties.each { key, value ->
      if (key.startsWith('org.ajoberstar.grgit.test')) {
        systemProperties((key): value)
      }
    }
  }
}

stutter {
    supports '3.0', '3.1', '3.2', '3.2.1', '3.3', '3.4', '3.5', '3.5.1', '4.0', '4.0.1', '4.0.2', '4.1', '4.2', '4.2.1'
}

model {
  bintray {
    owner = 'ajoberstar'
    repo = 'maven'
    pkg = 'grgit'
  }
}

pluginBundle {
    website = 'https://github.com/ajoberstar/grgit'
    vcsUrl = 'https://github.com/ajoberstar/grgit.git'
    description = 'The Groovy way to use Git'
    plugins {
        publishPlugin {
            id = 'org.ajoberstar.grgit'
            displayName = 'The Groovy way to use Git'
            tags = ['git', 'groovy']
        }
    }
    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
        version = project.version
    }
}
