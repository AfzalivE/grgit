= grgit-authentication
:jbake-title: grgit-authentication
:jbake-type: page
:jbake-status: published

Stores configuration options for how to authenticate with remote repositories.

The following system properties can be set to configure how authentication is performed with remote repositories. All "allow" properties default to true.

`org.ajoberstar.grgit.auth.force={hardcoded|interactive|sshagent|pageant}`
org.ajoberstar.grgit.auth.hardcoded.allow={true|false}
org.ajoberstar.grgit.auth.interactive.allow={true|false}
org.ajoberstar.grgit.auth.sshagent.allow={true|false}
org.ajoberstar.grgit.auth.pageant.allow={true|false}
In order to set default hardocded credentials, use the following properties. Note that unless hardcoded credentials are disabled, using these properties will supersede the use of interactive creds, ssh-agent, or Pageant. However, they will not take precedence over credentials provided directly to a repository during the clone, init, or open.

org.ajoberstar.grgit.auth.username=<username>
org.ajoberstar.grgit.auth.password=<password>
Hardcoded credentials can alternately be provided with environment variables. These take a lower precedence than the system properties, but all other considerations are the same.

GRGIT_USER=<username>
GRGIT_PASS=<password>
To customize SSH credentials use the following properties. In order to add a non-standard SSH key to use as your credentials, use the first following property. In case your private key is protected by a passphrase, use the second property.

org.ajoberstar.grgit.auth.ssh.private=<path.to.private.key>
org.ajoberstar.grgit.auth.ssh.passphrase=<passphrase>
In order to customize the JSch session config use a property of the following format (possible values JSch documentation):

org.ajoberstar.grgit.auth.session.config.<key>=<value>
The following order is used to determine which authentication option is used.

Hardcoded credentials, if provided.
Ssh-Agent, if available.
Pageant, if available.
Interactive credentials, if needed.
